=============================================================================
List of generated methods in project: Splinter bringup

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "clockMan1" (component fsl_clock_manager)
   - clockMan1_CLOCK_SYS_SetOutDiv1 -Sets the clock out divider1 setting(OUTDIV1).
   - clockMan1_CLOCK_SYS_GetOutDiv1 -Gets the clock out divider1 setting(OUTDIV1).
   - clockMan1_CLOCK_SYS_SetOutDiv2 -Sets the clock out divider2 setting(OUTDIV2).
   - clockMan1_CLOCK_SYS_GetOutDiv2 -Gets the clock out divider2 setting(OUTDIV2).
   - clockMan1_CLOCK_SYS_SetOutDiv3 -Sets the clock out divider3 setting(OUTDIV3).
   - clockMan1_CLOCK_SYS_GetOutDiv3 -Gets the clock out divider3 setting(OUTDIV3).
   - clockMan1_CLOCK_SYS_SetOutDiv4 -Sets the clock out divider4 setting(OUTDIV4).
   - clockMan1_CLOCK_SYS_GetOutDiv4 -Gets the clock out divider4 setting(OUTDIV4).
   - clockMan1_CLOCK_SYS_SetOutDiv -Sets the clock out dividers setting.
   - clockMan1_CLOCK_SYS_GetOutDiv -Gets the clock out dividers setting.
   - clockMan1_CLOCK_SYS_GetFlexbusFreq -Get flexbus clock frequency.
   - clockMan1_CLOCK_SYS_GetPllFllClockFreq -Get the MCGPLLCLK/MCGFLLCLK/IRC48MCLK clock frequency.
   - clockMan1_CLOCK_SYS_GetPllFllDivClockFreq -Gets the PLL/FLL clock divided by the fractional divider.
   - clockMan1_CLOCK_SYS_SetPllfllSel -Set PLL/FLL clock selection.
   - clockMan1_CLOCK_SYS_GetPllfllSel -Get PLL/FLL clock selection.
   - clockMan1_CLOCK_SYS_GetFixedFreqClockFreq -Gets the MCGFFCLK clock frequency.
   - clockMan1_CLOCK_SYS_GetInternalRefClockFreq -Get internal reference clock frequency.
   - clockMan1_CLOCK_SYS_GetExternalRefClock32kFreq -Gets the external reference 32k clock frequency.
   - clockMan1_CLOCK_SYS_SetExternalRefClock32kSrc -Set the clock selection of ERCLK32K.
   - clockMan1_CLOCK_SYS_GetExternalRefClock32kSrc -Get the clock selection of ERCLK32K.
   - clockMan1_CLOCK_SYS_GetOsc0ExternalRefClockFreq -Gets the OSC0ERCLK frequency.
   - clockMan1_CLOCK_SYS_GetOsc0ExternalRefClockUndivFreq -Gets the OSC0ERCLK_UNDIV frequency.
   - clockMan1_CLOCK_SYS_GetRtcFreq -Gets RTC input clock frequency.
   - clockMan1_CLOCK_SYS_GetRtcOutFreq -Gets RTC_CLKOUT frequency.
   - clockMan1_CLOCK_SYS_GetRtcOutSrc -Gets RTC_CLKOUT source.
   - clockMan1_CLOCK_SYS_SetRtcOutSrc -Gets RTC_CLKOUT source.
   - clockMan1_CLOCK_SYS_GetWdogFreq -Gets the watch dog clock frequency.
   - clockMan1_CLOCK_SYS_GetTraceSrc -Gets the debug trace clock source.
   - clockMan1_CLOCK_SYS_SetTraceSrc -Sets the debug trace clock source.
   - clockMan1_CLOCK_SYS_GetTraceFreq -Gets the debug trace clock frequency.
   - clockMan1_CLOCK_SYS_GetPortFilterFreq -Gets PORTx digital input filter clock frequency.
   - clockMan1_CLOCK_SYS_GetLptmrFreq -Gets LPTMRx pre-scaler/glitch filter clock frequency.
   - clockMan1_CLOCK_SYS_GetTpmFreq -Gets TPM clock frequency.
   - clockMan1_CLOCK_SYS_SetTpmSrc -Set the TPM clock source selection.
   - clockMan1_CLOCK_SYS_GetTpmSrc -Get the TPM clock source selection.
   - clockMan1_CLOCK_SYS_GetTpmExternalFreq -Get the TPM external clock source frequency.
   - clockMan1_CLOCK_SYS_SetTpmExternalSrc -Set the TPM external clock source selection.
   - clockMan1_CLOCK_SYS_GetTpmExternalSrc -Set the TPM external clock source selection.
   - clockMan1_CLOCK_SYS_GetEnetRmiiSrc -Gets ethernet RMII clock source.
   - clockMan1_CLOCK_SYS_SetEnetRmiiSrc -Sets ethernet RMII clock source.
   - clockMan1_CLOCK_SYS_GetEnetRmiiFreq -Gets ethernet RMII clock frequency.
   - clockMan1_CLOCK_SYS_SetEnetTimeStampSrc -Set the ethernet timestamp clock source selection.
   - clockMan1_CLOCK_SYS_GetEnetTimeStampSrc -Get the ethernet timestamp clock source selection.
   - clockMan1_CLOCK_SYS_GetEnetTimeStampFreq -Gets ethernet timestamp clock frequency.
   - clockMan1_CLOCK_SYS_GetEwmFreq -Gets the clock frequency for EWM module.
   - clockMan1_CLOCK_SYS_GetFtfFreq -Gets the clock frequency for FTF module. (Flash Memory)
   - clockMan1_CLOCK_SYS_GetCrcFreq -Gets the clock frequency for CRC module.
   - clockMan1_CLOCK_SYS_GetCmpFreq -Gets the clock frequency for CMP module.
   - clockMan1_CLOCK_SYS_GetVrefFreq -Gets the clock frequency for VREF module.
   - clockMan1_CLOCK_SYS_GetPdbFreq -Gets the clock frequency for PDB module.
   - clockMan1_CLOCK_SYS_GetPitFreq -Gets the clock frequency for PIT module.
   - clockMan1_CLOCK_SYS_GetCmtFreq -Gets the clock frequency for CMT module.
   - clockMan1_CLOCK_SYS_GetLpuartSrc -Gets the clock source for LPUART module.
   - clockMan1_CLOCK_SYS_SetLpuartSrc -Sets the clock source for LPUART module.
   - clockMan1_CLOCK_SYS_GetLpuartFreq -Gets the clock frequency for LPUART module.
   - clockMan1_CLOCK_SYS_GetUsbfsSrc -Gets the clock source for USB FS OTG module.
   - clockMan1_CLOCK_SYS_SetUsbfsSrc -Sets the clock source for USB FS OTG module.
   - clockMan1_CLOCK_SYS_GetUsbfsFreq -Gets the clock frequency for USB FS OTG module.
   - clockMan1_CLOCK_SYS_SetUsbfsDiv -Set USB FS divider setting.
   - clockMan1_CLOCK_SYS_GetUsbfsDiv -Get USB FS divider setting.
   - clockMan1_CLOCK_SYS_GetUsbhsSlowClockSrc -Gets the slow clock source for USB HS/USB PHY module.
   - clockMan1_CLOCK_SYS_SetUsbhsSlowClockSrc -Sets the clock source for USB HS/USB PHY module.
   - clockMan1_CLOCK_SYS_GetUsbhsSlowClockFreq -Gets the slow clock frequency for USB HS/USB PHY module.
   - clockMan1_CLOCK_SYS_GetFlexcanFreq -Gets FLEXCAN clock frequency.
   - clockMan1_CLOCK_SYS_GetSdhcFreq -Gets the clock frequency for SDHC.
   - clockMan1_CLOCK_SYS_SetSdhcSrc -Set the SDHC clock source selection.
   - clockMan1_CLOCK_SYS_GetSdhcSrc -Get the SDHC clock source selection.
   - clockMan1_CLOCK_SYS_GetSaiFreq -Gets the clock frequency for SAI.
   - clockMan1_CLOCK_SYS_GetUsbdcdFreq -Gets the clock frequency for USB DCD module.
   - clockMan1_CLOCK_SYS_GetSpiFreq -Gets the clock frequency for SPI module.
   - clockMan1_CLOCK_SYS_GetI2cFreq -Gets the clock frequency for I2C module.
   - clockMan1_CLOCK_SYS_GetAdcAltFreq -Gets ADC alternate clock frequency.
   - clockMan1_CLOCK_SYS_GetFtmFixedFreq -Gets FTM fixed frequency clock frequency.
   - clockMan1_CLOCK_SYS_GetFtmSystemClockFreq -Gets FTM's system clock frequency.
   - clockMan1_CLOCK_SYS_GetFtmExternalFreq -Gets FTM external clock frequency.
   - clockMan1_CLOCK_SYS_GetFtmExternalSrc -Gets FTM external clock source.
   - clockMan1_CLOCK_SYS_SetFtmExternalSrc -Sets FTM external clock source.
   - clockMan1_CLOCK_SYS_GetUartFreq -Gets the clock frequency for UART module.
   - clockMan1_CLOCK_SYS_GetGpioFreq -Gets the clock frequency for GPIO module.
   - clockMan1_CLOCK_SYS_EnableDmaClock -Enable the clock for DMA module.
   - clockMan1_CLOCK_SYS_DisableDmaClock -Disable the clock for DMA module.
   - clockMan1_CLOCK_SYS_GetDmaGateCmd -Get the the clock gate state for DMA module.
   - clockMan1_CLOCK_SYS_EnableDmamuxClock -Enable the clock for DMAMUX module.
   - clockMan1_CLOCK_SYS_DisableDmamuxClock -Disable the clock for DMAMUX module.
   - clockMan1_CLOCK_SYS_GetDmamuxGateCmd -Get the the clock gate state for DMAMUX module.
   - clockMan1_CLOCK_SYS_EnablePortClock -Enable the clock for PORT module.
   - clockMan1_CLOCK_SYS_DisablePortClock -Disable the clock for PORT module.
   - clockMan1_CLOCK_SYS_GetPortGateCmd -Get the the clock gate state for PORT module.
   - clockMan1_CLOCK_SYS_EnableMpuClock -Enable the clock for MPU module.
   - clockMan1_CLOCK_SYS_DisableMpuClock -Disable the clock for MPU module.
   - clockMan1_CLOCK_SYS_GetMpuGateCmd -Get the the clock gate state for MPU module.
   - clockMan1_CLOCK_SYS_EnableEwmClock -Enable the clock for EWM module.
   - clockMan1_CLOCK_SYS_DisableEwmClock -Disable the clock for EWM module.
   - clockMan1_CLOCK_SYS_GetEwmGateCmd -Get the the clock gate state for EWM module.
   - clockMan1_CLOCK_SYS_EnableFlexbusClock -Enable the clock for FLEXBUS module.
   - clockMan1_CLOCK_SYS_DisableFlexbusClock -Disable the clock for FLEXBUS module.
   - clockMan1_CLOCK_SYS_GetFlexbusGateCmd -Get the the clock gate state for FLEXBUS module.
   - clockMan1_CLOCK_SYS_EnableSdramcClock -Enable the clock for SDRAMC module.
   - clockMan1_CLOCK_SYS_DisableSdramcClock -Disable the clock for SDRAMC module.
   - clockMan1_CLOCK_SYS_GetSdramcGateCmd -Get the the clock gate state for SDRAMC module.
   - clockMan1_CLOCK_SYS_EnableFtfClock -Enable the clock for FTF module.
   - clockMan1_CLOCK_SYS_DisableFtfClock -Disable the clock for FTF module.
   - clockMan1_CLOCK_SYS_GetFtfGateCmd -Get the the clock gate state for FTF module.
   - clockMan1_CLOCK_SYS_EnableCrcClock -Enable the clock for CRC module.
   - clockMan1_CLOCK_SYS_DisableCrcClock -Disable the clock for CRC module.
   - clockMan1_CLOCK_SYS_GetCrcGateCmd -Get the the clock gate state for CRC module.
   - clockMan1_CLOCK_SYS_EnableRngaClock -Enable the clock for RNGA module.
   - clockMan1_CLOCK_SYS_DisableRngaClock -Disable the clock for RNGA module.
   - clockMan1_CLOCK_SYS_GetRngaGateCmd -Get the the clock gate state for RNGA module.
   - clockMan1_CLOCK_SYS_EnableAdcClock -Enable the clock for ADC module.
   - clockMan1_CLOCK_SYS_DisableAdcClock -Disable the clock for ADC module.
   - clockMan1_CLOCK_SYS_GetAdcGateCmd -Get the the clock gate state for ADC module.
   - clockMan1_CLOCK_SYS_EnableCmpClock -Enable the clock for CMP module.
   - clockMan1_CLOCK_SYS_DisableCmpClock -Disable the clock for CMP module.
   - clockMan1_CLOCK_SYS_GetCmpGateCmd -Get the the clock gate state for CMP module.
   - clockMan1_CLOCK_SYS_EnableDacClock -Enable the clock for DAC module.
   - clockMan1_CLOCK_SYS_DisableDacClock -Disable the clock for DAC module.
   - clockMan1_CLOCK_SYS_GetDacGateCmd -Get the the clock gate state for DAC module.
   - clockMan1_CLOCK_SYS_EnableVrefClock -Enable the clock for VREF module.
   - clockMan1_CLOCK_SYS_DisableVrefClock -Disable the clock for VREF module.
   - clockMan1_CLOCK_SYS_GetVrefGateCmd -Get the the clock gate state for VREF module.
   - clockMan1_CLOCK_SYS_EnableSaiClock -Enable the clock for SAI module.
   - clockMan1_CLOCK_SYS_DisableSaiClock -Disable the clock for SAI module.
   - clockMan1_CLOCK_SYS_GetSaiGateCmd -Get the the clock gate state for SAI module.
   - clockMan1_CLOCK_SYS_EnableTpmClock -Enable the clock for TPM module.
   - clockMan1_CLOCK_SYS_DisableTpmClock -Disable the clock for TPM module.
   - clockMan1_CLOCK_SYS_GetTpmGateCmd -Get the the clock gate state for TPM module.
   - clockMan1_CLOCK_SYS_EnablePdbClock -Enable the clock for PDB module.
   - clockMan1_CLOCK_SYS_DisablePdbClock -Disable the clock for PDB module.
   - clockMan1_CLOCK_SYS_GetPdbGateCmd -Get the the clock gate state for PDB module.
   - clockMan1_CLOCK_SYS_EnableFtmClock -Enable the clock for FTM module.
   - clockMan1_CLOCK_SYS_DisableFtmClock -Disable the clock for FTM module.
   - clockMan1_CLOCK_SYS_GetFtmGateCmd -Get the the clock gate state for FTM module.
   - clockMan1_CLOCK_SYS_EnablePitClock -Enable the clock for PIT module.
   - clockMan1_CLOCK_SYS_DisablePitClock -Disable the clock for PIT module.
   - clockMan1_CLOCK_SYS_GetPitGateCmd -Get the the clock gate state for PIT module.
   - clockMan1_CLOCK_SYS_EnableLptmrClock -Enable the clock for LPTIMER module.
   - clockMan1_CLOCK_SYS_DisableLptmrClock -Disable the clock for LPTIMER module.
   - clockMan1_CLOCK_SYS_GetLptmrGateCmd -Get the the clock gate state for LPTIMER module.
   - clockMan1_CLOCK_SYS_EnableCmtClock -Enable the clock for CMT module.
   - clockMan1_CLOCK_SYS_DisableCmtClock -Disable the clock for CMT module.
   - clockMan1_CLOCK_SYS_GetCmtGateCmd -Get the the clock gate state for CMT module.
   - clockMan1_CLOCK_SYS_EnableRtcClock -Enable the clock for RTC module.
   - clockMan1_CLOCK_SYS_DisableRtcClock -Disable the clock for RTC module.
   - clockMan1_CLOCK_SYS_GetRtcGateCmd -Get the the clock gate state for RTC module.
   - clockMan1_CLOCK_SYS_EnableEnetClock -Enable the clock for ENET module.
   - clockMan1_CLOCK_SYS_DisableEnetClock -Disable the clock for ENET module.
   - clockMan1_CLOCK_SYS_GetEnetGateCmd -Get the the clock gate state for ENET module.
   - clockMan1_CLOCK_SYS_EnableUsbfsClock -Enable the clock for USBFS module.
   - clockMan1_CLOCK_SYS_DisableUsbfsClock -Disable the clock for USBFS module.
   - clockMan1_CLOCK_SYS_GetUsbfsGateCmd -Get the the clock gate state for USB module.
   - clockMan1_CLOCK_SYS_EnableUsbdcdClock -Enable the clock for USBDCD module.
   - clockMan1_CLOCK_SYS_DisableUsbdcdClock -Disable the clock for USBDCD module.
   - clockMan1_CLOCK_SYS_GetUsbdcdGateCmd -Get the the clock gate state for USBDCD module.
   - clockMan1_CLOCK_SYS_EnableUsbhsClock -Enable the clock for USBHS module.
   - clockMan1_CLOCK_SYS_DisableUsbhsClock -Disable the clock for USBHS module.
   - clockMan1_CLOCK_SYS_GetUsbhsGateCmd -Get the the clock gate state for USBHS module.
   - clockMan1_CLOCK_SYS_EnableUsbphyClock -Enable the clock for USBPHY module.
   - clockMan1_CLOCK_SYS_DisableUsbphyClock -Disable the clock for USBPHY module.
   - clockMan1_CLOCK_SYS_GetUsbphyGateCmd -Get the the clock gate state for USBPHY module.
   - clockMan1_CLOCK_SYS_EnableUsbhsdcdClock -Enable the clock for USBHSDCD module.
   - clockMan1_CLOCK_SYS_DisableUsbhsdcdClock -Disable the clock for USBHSDCD module.
   - clockMan1_CLOCK_SYS_GetUsbhsdcdGateCmd -Get the the clock gate state for USBHSDCD module.
   - clockMan1_CLOCK_SYS_EnableFlexcanClock -Enable the clock for FLEXCAN module.
   - clockMan1_CLOCK_SYS_DisableFlexcanClock -Disable the clock for FLEXCAN module.
   - clockMan1_CLOCK_SYS_GetFlexcanGateCmd -Get the the clock gate state for FLEXCAN module.
   - clockMan1_CLOCK_SYS_EnableSpiClock -Enable the clock for SPI module.
   - clockMan1_CLOCK_SYS_DisableSpiClock -Disable the clock for SPI module.
   - clockMan1_CLOCK_SYS_GetSpiGateCmd -Get the the clock gate state for SPI module.
   - clockMan1_CLOCK_SYS_EnableI2cClock -Enable the clock for I2C module.
   - clockMan1_CLOCK_SYS_DisableI2cClock -Disable the clock for I2C module.
   - clockMan1_CLOCK_SYS_GetI2cGateCmd -Get the the clock gate state for I2C module.
   - clockMan1_CLOCK_SYS_EnableUartClock -Enable the clock for UART module.
   - clockMan1_CLOCK_SYS_DisableUartClock -Disable the clock for UART module.
   - clockMan1_CLOCK_SYS_GetUartGateCmd -Get the the clock gate state for UART module.
   - clockMan1_CLOCK_SYS_EnableLpuartClock -Enable the clock for LPUART module.
   - clockMan1_CLOCK_SYS_DisableLpuartClock -Disable the clock for LPUART module.
   - clockMan1_CLOCK_SYS_GetLpuartGateCmd -Get the the clock gate state for LPUART module.
   - clockMan1_CLOCK_SYS_EnableSdhcClock -Enable the clock for SDHC module.
   - clockMan1_CLOCK_SYS_DisableSdhcClock -Disable the clock for SDHC module.
   - clockMan1_CLOCK_SYS_GetSdhcGateCmd -Get the the clock gate state for SDHC module.
   - clockMan1_CLOCK_SYS_EnableTsiClock -Enable the clock for TSI module.
   - clockMan1_CLOCK_SYS_DisableTsiClock -Disable the clock for TSI module.
   - clockMan1_CLOCK_SYS_GetTsiGateCmd -Get the the clock gate state for TSI module.
   - clockMan1_CLOCK_SYS_SetEnetExternalFreq -Set the ENET external clock frequency(ENET_1588_CLKIN).
   - clockMan1_CLOCK_SYS_SetSdhcExternalFreq -Set the SDHC external clock frequency(SDHC_CLKIN).
   - clockMan1_CLOCK_SYS_SetUsbExternalFreq -Set the USB external clock frequency(USB_CLKIN).
   - clockMan1_CLOCK_SYS_SetFtmExternalFreq -Set the FTM external clock frequency(FTM_CLKx).
   - clockMan1_CLOCK_SYS_Init -Install pre-defined clock configurations.
   - clockMan1_CLOCK_SYS_UpdateConfiguration -Set system clock configuration according to pre-defined structure.
   - clockMan1_CLOCK_SYS_SetConfiguration -Set system clock configuration.
   - clockMan1_CLOCK_SYS_GetCurrentConfiguration -Get current system clock configuration.
   - clockMan1_CLOCK_SYS_GetErrorCallback -Get the callback which returns error in last clock switch.
   - clockMan1_CLOCK_SYS_SetMcgliteMode -Sets the MCG_Lite to some specific mode.
   - clockMan1_CLOCK_SYS_SetMcgMode -Set MCG to some target mode.
   - clockMan1_CLOCK_SYS_OscInit -Initialize OSC.
   - clockMan1_CLOCK_SYS_OscDeinit -Deinitialize OSC.
   - clockMan1_CLOCK_SYS_SetOscerConfigration -Configure the OSCERCLK.
   - clockMan1_CLOCK_SYS_RtcOscInit -Initialize the RTC OSC.
   - clockMan1_CLOCK_SYS_RtcOscDeinit -Deinitialize RTC OSC.
   - clockMan1_CLOCK_SYS_GetFreq -Gets the clock frequency for a specific clock name.
   - clockMan1_CLOCK_SYS_GetCoreClockFreq -Get core clock frequency.
   - clockMan1_CLOCK_SYS_GetSystemClockFreq -Get system clock frequency.
   - clockMan1_CLOCK_SYS_GetBusClockFreq -Get bus clock frequency.
   - clockMan1_CLOCK_SYS_GetFlashClockFreq -Get flash clock frequency.
   - clockMan1_CLOCK_SYS_GetLpoClockFreq -Get LPO clock frequency.
   - clockMan1_CLOCK_SYS_SetSystickSrc -Set Systick clock source SYST_CSR[CLKSOURCE].
   - clockMan1_CLOCK_SYS_GetSystickFreq -Get Systick clock frequency.

Module "pin_mux"   (component PinSettings)
   - pin_mux_hardware_init -This method configures registers according to settings of routing and electrical features. It 
                provides pin initialization for selected pins during processor start-up. Selected pins are either user selected 
                pins or pins selected in pin properties in components.  Only pins of devices  enabled for auto initialization 
                are handled within this method.
   - pin_mux_init_enet_pins -ENET method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                ENET peripheral.
   - pin_mux_deinit_enet_pins -ENET method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                ENET peripheral.
   - pin_mux_init_ewm_pins -EWM method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into EWM 
                peripheral.
   - pin_mux_deinit_ewm_pins -EWM method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into EWM 
                peripheral.
   - pin_mux_init_ftm_pins -FTM method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                FTM0, FTM1, FTM2, FTM3 peripherals.
   - pin_mux_deinit_ftm_pins -FTM method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                FTM0, FTM1, FTM2, FTM3 peripherals.
   - pin_mux_init_gpio_pins -GPIO method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into PTA,
                PTB, PTC, PTD, PTE peripherals.
   - pin_mux_deinit_gpio_pins -GPIO method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into PTA,
                PTB, PTC, PTD, PTE peripherals.
   - pin_mux_init_i2c_pins -I2C method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                I2C0, I2C1, I2C2, I2C3 peripherals.
   - pin_mux_deinit_i2c_pins -I2C method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                I2C0, I2C1, I2C2, I2C3 peripherals.
   - pin_mux_init_jtag_pins -JTAG method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                JTAG peripheral.
   - pin_mux_deinit_jtag_pins -JTAG method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                JTAG peripheral.
   - pin_mux_init_llwu_pins -LLWU method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                LLWU peripheral.
   - pin_mux_deinit_llwu_pins -LLWU method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                LLWU peripheral.
   - pin_mux_init_osc_pins -OSC method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into OSC 
                peripheral.
   - pin_mux_deinit_osc_pins -OSC method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into OSC 
                peripheral.
   - pin_mux_init_spi_pins -SPI method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                SPI0, SPI1, SPI2 peripherals.
   - pin_mux_deinit_spi_pins -SPI method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                SPI0, SPI1, SPI2 peripherals.
   - pin_mux_init_tpiu_pins -TPIU method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                TPIU peripheral.
   - pin_mux_deinit_tpiu_pins -TPIU method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                TPIU peripheral.
   - pin_mux_init_uart_pins -UART method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                UART0, UART1, UART2, UART3, UART4 peripherals.
   - pin_mux_deinit_uart_pins -UART method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                UART0, UART1, UART2, UART3, UART4 peripherals.

Module "osa1"      (component fsl_os_abstraction)
   - osa1_OSA_PollAllOtherTasks -Calls all task functions one time except for the current task.
   - osa1_DefaultISR -The default interrupt handler installed in vector table.
   - osa1_OSA_SemaCreate -Creates a semaphore with a given value.
   - osa1_OSA_SemaWait -Pending a semaphore with timeout.
   - osa1_OSA_SemaPost -Signals for someone waiting on the semaphore to wake up.
   - osa1_OSA_SemaDestroy -Destroys a previously created semaphore.
   - osa1_OSA_MutexCreate -Create an unlocked mutex.
   - osa1_OSA_MutexLock -Waits for a mutex and locks it.
   - osa1_OSA_MutexUnlock -Unlocks a previously locked mutex.
   - osa1_OSA_MutexDestroy -Destroys a previously created mutex.
   - osa1_OSA_EventCreate -Initializes an event object with all flags cleared.
   - osa1_OSA_EventWait -Waits for specified event flags to be set.
   - osa1_OSA_EventSet -Sets one or more event flags.
   - osa1_OSA_EventClear -Clears one or more flags.
   - osa1_OSA_EventGetFlags -Gets event flags status.
   - osa1_OSA_EventDestroy -Destroys a previously created event object.
   - osa1_OSA_TaskCreate -Creates a task.
   - osa1_OSA_TaskDestroy -Destroys a previously created task.
   - osa1_OSA_TaskYield -Puts the active task to the end of scheduler's queue.
   - osa1_OSA_TaskGetHandler -Gets the handler of active task.
   - osa1_OSA_TaskGetPriority -Gets the priority of a task.
   - osa1_OSA_TaskSetPriority -Sets the priority of a task.
   - osa1_OSA_MsgQCreate -Initializes a message queue.
   - osa1_OSA_MsgQPut -Puts a message at the end of the queue.
   - osa1_OSA_MsgQGet -Reads and remove a message at the head of the queue.
   - osa1_OSA_MsgQDestroy -Destroys a previously created queue.
   - osa1_OSA_MemAlloc -Reserves the requested amount of memory in bytes.
   - osa1_OSA_MemAllocZero -Reserves the requested amount of memory in bytes and initializes it to 0.
   - osa1_OSA_MemFree -Releases the memory previously reserved.
   - osa1_OSA_TimeDelay -Delays execution for a number of milliseconds.
   - osa1_OSA_TimeGetMsec -Gets the current time since system boot in milliseconds.
   - osa1_OSA_InstallIntHandler -Installs the interrupt handler.
   - osa1_OSA_EnterCritical -Enters the critical section to ensure some code is not preempted.
   - osa1_OSA_ExitCritical -Exits the critical section.
   - osa1_OSA_Init -Initializes the RTOS services.
   - osa1_OSA_Start -Starts the RTOS.

Module "intMan1"   (component fsl_interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.

Module "gpio1"     (component fsl_gpio_hal)
   - gpio1_GPIO_HAL_SetPinDir -Sets the individual GPIO pin to general input or output.
   - gpio1_GPIO_HAL_SetPortDir -Sets the GPIO port pins to general input or output.
   - gpio1_GPIO_HAL_GetPinDir -Gets the current direction of the individual GPIO pin.
   - gpio1_GPIO_HAL_GetPortDir -Gets the GPIO port pins direction.
   - gpio1_GPIO_HAL_WritePinOutput -Sets the output level of the individual GPIO pin to logic 1 or 0.
   - gpio1_GPIO_HAL_ReadPinOutput -Reads the current pin output.
   - gpio1_GPIO_HAL_SetPinOutput -Sets the output level of the individual GPIO pin to logic 1.
   - gpio1_GPIO_HAL_ClearPinOutput -Clears the output level of the individual GPIO pin to logic 0.
   - gpio1_GPIO_HAL_TogglePinOutput -Reverses the current output logic of the individual GPIO pin.
   - gpio1_GPIO_HAL_WritePortOutput -Sets the output of the GPIO port pins to a specific logic value.
   - gpio1_GPIO_HAL_ReadPortOutput -Reads out all pin output status of the current port.
   - gpio1_GPIO_HAL_SetPortOutput -Sets the output level of the GPIO port pins to logic 1.
   - gpio1_GPIO_HAL_ClearPortOutput -Clears the output level of the GPIO port pins to logic 0.
   - gpio1_GPIO_HAL_TogglePortOutput -Reverses the current output logic of the GPIO port pins.
   - gpio1_GPIO_HAL_ReadPinInput -Reads the current input value of the individual GPIO pin.
   - gpio1_GPIO_HAL_ReadPortInput -Reads the current input value of a specific GPIO port.

Module "gpio2"     (component fsl_gpio)
   - gpio2_GPIO_DRV_Init -Initializes all GPIO pins used by the board.
   - gpio2_GPIO_DRV_InputPinInit -Initializes one GPIO input pin used by the board.
   - gpio2_GPIO_DRV_OutputPinInit -Initializes one GPIO output pin used by the board.
   - gpio2_GPIO_DRV_GetPinDir -Gets the current direction of the individual GPIO pin.
   - gpio2_GPIO_DRV_SetPinDir -Sets the current direction of the individual GPIO pin.
   - gpio2_GPIO_DRV_WritePinOutput -Sets the output level of the individual GPIO pin to the logic 1 or 0.
   - gpio2_GPIO_DRV_SetPinOutput -Sets the output level of the individual GPIO pin to the logic 1.
   - gpio2_GPIO_DRV_ClearPinOutput -Sets the output level of the individual GPIO pin to the logic 0.
   - gpio2_GPIO_DRV_TogglePinOutput -Reverses current output logic of the individual GPIO pin.
   - gpio2_GPIO_DRV_ReadPinInput -Reads the current input value of the individual GPIO pin.
   - gpio2_GPIO_DRV_SetDigitalFilterCmd -Enables or disables the digital filter in a single port.
   - gpio2_GPIO_DRV_IsPinIntPending -Reads the individual pin-interrupt status flag.
   - gpio2_GPIO_DRV_ClearPinIntFlag -Clears the individual GPIO pin interrupt status flag.

Module "i2cCom1"   (component fsl_i2c)
   - i2cCom1_I2C_DRV_IRQHandler -Pass IRQ control to either the master or slave driver.
   - i2cCom1_I2C_DRV_MasterInit -Initializes the I2C master mode driver.
   - i2cCom1_I2C_DRV_MasterDeinit -Shuts down the driver.
   - i2cCom1_I2C_DRV_MasterSetBaudRate -Configures the I2C bus to access a device.
   - i2cCom1_I2C_DRV_MasterSendDataBlocking -Performs a blocking send transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterSendData -Performs a non-blocking send transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterGetSendStatus -Gets the current status of the I2C master transmit.
   - i2cCom1_I2C_DRV_MasterAbortSendData -Terminates a non-blocking I2C Master transmission early.
   - i2cCom1_I2C_DRV_MasterReceiveDataBlocking -Performs a blocking receive transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterReceiveData -Performs a non-blocking receive transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterGetReceiveStatus -Gets the current status of the I2C master receive.
   - i2cCom1_I2C_DRV_MasterReceiveDataPolling -Performs a polling receive transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterSendDataPolling -Performs a polling send transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterIRQHandler -The interrupt handler for I2C master mode.
   - i2cCom1_I2C_DRV_SlaveInit -Initializes the I2C module.
   - i2cCom1_I2C_DRV_SlaveDeinit -Shuts down the I2C slave driver.
   - i2cCom1_I2C_DRV_SlaveGetHandler -Gets the i2c slave run-time state structure.
   - i2cCom1_I2C_DRV_SlaveSendData -Sends/transmits data by using a non-blocking method.
   - i2cCom1_I2C_DRV_SlaveSendDataBlocking -Sends (transmits) data by using a blocking method.
   - i2cCom1_I2C_DRV_SlaveReceiveData -Receives the data by using a non-blocking method.
   - i2cCom1_I2C_DRV_SlaveReceiveDataBlocking -Receives data by using a blocking method.
   - i2cCom1_I2C_DRV_SlaveGetReceiveStatus -Gets the current status of the I2C slave driver.
   - i2cCom1_I2C_DRV_SlaveGetTransmitStatus -Gets the current status of the I2C slave driver.
   - i2cCom1_I2C_DRV_SlaveAbortReceiveData -Terminates a non-blocking receive of the I2C slave early.
   - i2cCom1_I2C_DRV_SlaveAbortSendData -Terminates a non-blocking send of the I2C slave early.
   - i2cCom1_I2C_DRV_SlaveIsBusBusy -Gets the current status of the I2C slave bus.
   - i2cCom1_I2C_DRV_SlaveSendDataPolling -Sends out multiple bytes of data using a polling method.
   - i2cCom1_I2C_DRV_SlaveReceiveDataPolling -Receives multiple bytes of data using a polling method.
   - i2cCom1_I2C_DRV_SlaveIRQHandler -The interrupt handler for I2C slave mode.

Module "i2cCom2"   (component fsl_i2c_hal)
   - i2cCom2_I2C_HAL_Init -Restores the I2C peripheral to reset state.
   - i2cCom2_I2C_HAL_Enable -Enables the I2C module operation.
   - i2cCom2_I2C_HAL_Disable -Disables the I2C module operation.
   - i2cCom2_I2C_HAL_SetDmaCmd -Enables or disables the DMA support.
   - i2cCom2_I2C_HAL_GetDmaCmd -Returns whether I2C DMA support is enabled.
   - i2cCom2_I2C_HAL_SetHighDriveCmd -Controls the drive capability of the I2C pads.
   - i2cCom2_I2C_HAL_SetGlitchWidth -Controls the width of the programmable glitch filter.
   - i2cCom2_I2C_HAL_SetWakeupCmd -Controls the I2C wakeup enable.
   - i2cCom2_I2C_HAL_SetStopHoldoffCmd -Controls the stop mode hold off.
   - i2cCom2_I2C_HAL_SetBaudRate -Sets the I2C bus frequency for master transactions.
   - i2cCom2_I2C_HAL_SetFreqDiv -Sets the I2C baud rate multiplier and table entry.
   - i2cCom2_I2C_HAL_SetSlaveBaudCtrlCmd -Slave baud rate control.
   - i2cCom2_I2C_HAL_SendStart -Sends a START or a Repeated START signal on the I2C bus.
   - i2cCom2_I2C_HAL_SendStop -Sends a STOP signal on the I2C bus.
   - i2cCom2_I2C_HAL_SendAck -Causes an ACK to be sent on the bus.
   - i2cCom2_I2C_HAL_SendNak -Causes a NAK to be sent on the bus.
   - i2cCom2_I2C_HAL_SetDirMode -Selects either transmit or receive mode.
   - i2cCom2_I2C_HAL_GetDirMode -Returns the currently selected transmit or receive mode.
   - i2cCom2_I2C_HAL_ReadByte -Returns the last byte of data read from the bus and initiate another read.
   - i2cCom2_I2C_HAL_WriteByte -Writes one byte of data to the I2C bus.
   - i2cCom2_I2C_HAL_ReadByteBlocking -Returns the last byte of data read from the bus and initiate another read. It will wait 
                till the transfer is actually completed.
   - i2cCom2_I2C_HAL_WriteByteBlocking -Writes one byte of data to the I2C bus and wait till that byte is transfered 
                successfully.
   - i2cCom2_I2C_HAL_MasterReceiveDataPolling -Performs a polling receive transaction on the I2C bus.
   - i2cCom2_I2C_HAL_MasterSendDataPolling -Performs a polling send transaction on the I2C bus.
   - i2cCom2_I2C_HAL_SlaveSendDataPolling -Send out multiple bytes of data using polling method.
   - i2cCom2_I2C_HAL_SlaveReceiveDataPolling -Receive multiple bytes of data using polling method.
   - i2cCom2_I2C_HAL_SetAddress7bit -Sets the primary 7-bit slave address.
   - i2cCom2_I2C_HAL_SetAddress10bit -Sets the primary slave address and enables 10-bit address mode.
   - i2cCom2_I2C_HAL_SetExtensionAddrCmd -Enables or disables the extension address (10-bit).
   - i2cCom2_I2C_HAL_GetExtensionAddrCmd -Returns whether the extension address is enabled or not.
   - i2cCom2_I2C_HAL_SetGeneralCallCmd -Controls whether the general call address is recognized.
   - i2cCom2_I2C_HAL_SetRangeMatchCmd -Enables or disables the slave address range matching.
   - i2cCom2_I2C_HAL_SetUpperAddress7bit -Sets the upper slave address.
   - i2cCom2_I2C_HAL_GetStatusFlag -Gets the I2C status flag state.
   - i2cCom2_I2C_HAL_IsMaster -Returns whether the I2C module is in master mode.
   - i2cCom2_I2C_HAL_ClearArbitrationLost -Clears the arbitration lost flag.
   - i2cCom2_I2C_HAL_SetIntCmd -Enables or disables I2C interrupt requests.
   - i2cCom2_I2C_HAL_GetIntCmd -Returns whether the I2C interrupts are enabled.
   - i2cCom2_I2C_HAL_IsIntPending -Returns the current I2C interrupt flag.
   - i2cCom2_I2C_HAL_ClearInt -Clears the I2C interrupt if set.
   - i2cCom2_I2C_HAL_GetStopFlag -Gets the flag indicating a STOP signal was detected on the I2C bus.
   - i2cCom2_I2C_HAL_ClearStopFlag -Clears the bus STOP signal detected flag.
   - i2cCom2_I2C_HAL_SetStartStopIntCmd -Enables the I2C bus start/stop detection interrupt.
   - i2cCom2_I2C_HAL_GetStartStopIntCmd -Returns whether the I2C bus start/stop detection interrupts are enabled.
   - i2cCom2_I2C_HAL_GetStartFlag -Gets the flag indicating a START signal was detected on the I2C bus.
   - i2cCom2_I2C_HAL_ClearStartFlag -Clears the bus START signal detected flag.

Module "flexTimer1" (component fsl_ftm)
   - flexTimer1_FTM_DRV_Init -Initializes the FTM driver.
   - flexTimer1_FTM_DRV_Deinit -Shuts down the FTM driver.
   - flexTimer1_FTM_DRV_PwmStop -Stops the channel PWM.
   - flexTimer1_FTM_DRV_PwmStart -Configures the duty cycle and frequency and starts outputting the PWM on a specified channel .
   - flexTimer1_FTM_DRV_QuadDecodeStart -Configures the parameters and activates the quadrature decode mode.
   - flexTimer1_FTM_DRV_QuadDecodeStop -De-activates the quadrature decode mode.
   - flexTimer1_FTM_DRV_CounterStart -Starts the FTM counter.
   - flexTimer1_FTM_DRV_CounterStop -Stops the FTM counter.
   - flexTimer1_FTM_DRV_CounterRead -Reads back the current value of the FTM counter.
   - flexTimer1_FTM_DRV_SetClock -Set FTM clock source.
   - flexTimer1_FTM_DRV_GetClock -Retrieves the frequency of the clock source feeding the FTM counter.
   - flexTimer1_FTM_DRV_SetTimeOverflowIntCmd -Enables or disables the timer overflow interrupt.
   - flexTimer1_FTM_DRV_SetFaultIntCmd -Enables or disables the fault interrupt.
   - flexTimer1_FTM_DRV_SetupChnInputCapture -Enables capture of an input signal on the channel using the function parameters.
   - flexTimer1_FTM_DRV_SetupChnOutputCompare -Configures the FTM to generate timed pulses.
   - flexTimer1_FTM_DRV_SetupChnDualEdgeCapture -Configures the dual edge capture mode of the FTM.
   - flexTimer1_FTM_DRV_IRQHandler -Action to take when an FTM interrupt is triggered.

Module "flexTimer2" (component fsl_ftm_hal)
   - flexTimer2_FTM_HAL_SetClockSource -Sets the FTM clock source.
   - flexTimer2_FTM_HAL_GetClockSource -Reads the FTM clock source.
   - flexTimer2_FTM_HAL_SetClockPs -Sets the FTM clock divider.
   - flexTimer2_FTM_HAL_GetClockPs -Reads the FTM clock divider.
   - flexTimer2_FTM_HAL_EnableTimerOverflowInt -Enables the FTM peripheral timer overflow interrupt.
   - flexTimer2_FTM_HAL_DisableTimerOverflowInt -Disables the FTM peripheral timer overflow interrupt.
   - flexTimer2_FTM_HAL_IsOverflowIntEnabled -Reads the bit that controls enabling the FTM timer overflow interrupt.
   - flexTimer2_FTM_HAL_ClearTimerOverflow -Clears the timer overflow interrupt flag.
   - flexTimer2_FTM_HAL_HasTimerOverflowed -Returns the FTM peripheral timer overflow interrupt flag.
   - flexTimer2_FTM_HAL_SetCpwms -Sets the FTM center-aligned PWM select.
   - flexTimer2_FTM_HAL_SetCounter -Sets the FTM peripheral current counter value.
   - flexTimer2_FTM_HAL_GetCounter -Returns the FTM peripheral current counter value.
   - flexTimer2_FTM_HAL_SetMod -Sets the FTM peripheral timer modulo value.
   - flexTimer2_FTM_HAL_GetMod -Returns the FTM peripheral counter modulo value.
   - flexTimer2_FTM_HAL_SetCounterInitVal -Sets the FTM peripheral timer counter initial value.
   - flexTimer2_FTM_HAL_GetCounterInitVal -Returns the FTM peripheral counter initial value.
   - flexTimer2_FTM_HAL_SetChnMSnBAMode -Sets the FTM peripheral timer channel mode.
   - flexTimer2_FTM_HAL_SetChnEdgeLevel -Sets the FTM peripheral timer channel edge level.
   - flexTimer2_FTM_HAL_GetChnMode -Gets the FTM peripheral timer channel mode.
   - flexTimer2_FTM_HAL_GetChnEdgeLevel -Gets the FTM peripheral timer channel edge level.
   - flexTimer2_FTM_HAL_SetChnDmaCmd -Enables or disables the FTM peripheral timer channel DMA.
   - flexTimer2_FTM_HAL_IsChnDma -Returns whether the FTM peripheral timer channel DMA is enabled.
   - flexTimer2_FTM_HAL_IsChnIntEnabled -Get FTM channel(n) interrupt enabled or not.
   - flexTimer2_FTM_HAL_EnableChnInt -Enables the FTM peripheral timer channel(n) interrupt.
   - flexTimer2_FTM_HAL_DisableChnInt -Disables the FTM peripheral timer channel(n) interrupt.
   - flexTimer2_FTM_HAL_HasChnEventOccurred -Returns whether any event for the FTM peripheral timer channel has occurred.
   - flexTimer2_FTM_HAL_ClearChnEventFlag -Clear the channel flag by writing a 0 to the CHF bit.
   - flexTimer2_FTM_HAL_SetChnCountVal -Sets the FTM peripheral timer channel counter value.
   - flexTimer2_FTM_HAL_GetChnCountVal -Gets the FTM peripheral timer channel counter value.
   - flexTimer2_FTM_HAL_GetChnEventStatus -Gets the FTM peripheral timer channel event status.
   - flexTimer2_FTM_HAL_ClearChnEventStatus -Clears the FTM peripheral timer all channel event status.
   - flexTimer2_FTM_HAL_SetOutmaskReg -Writes the provided value to the OUTMASK register.
   - flexTimer2_FTM_HAL_SetChnOutputMask -Sets the FTM peripheral timer channel output mask.
   - flexTimer2_FTM_HAL_SetChnOutputInitStateCmd -Sets the FTM peripheral timer channel output initial state 0 or 1.
   - flexTimer2_FTM_HAL_SetChnOutputPolarityCmd -Sets the FTM peripheral timer channel output polarity.
   - flexTimer2_FTM_HAL_SetChnFaultInputPolarityCmd -Sets the FTM peripheral timer channel input polarity.
   - flexTimer2_FTM_HAL_EnableFaultInt -Enables the FTM peripheral timer fault interrupt.
   - flexTimer2_FTM_HAL_DisableFaultInt -Disables the FTM peripheral timer fault interrupt.
   - flexTimer2_FTM_HAL_SetFaultControlMode -Defines the FTM fault control mode.
   - flexTimer2_FTM_HAL_SetCaptureTestCmd -Enables or disables the FTM peripheral timer capture test mode.
   - flexTimer2_FTM_HAL_SetWriteProtectionCmd -Enables or disables the FTM write protection.
   - flexTimer2_FTM_HAL_Enable -Enables the FTM peripheral timer group.
   - flexTimer2_FTM_HAL_SetInitChnOutputCmd -Initializes the channels output.
   - flexTimer2_FTM_HAL_SetPwmSyncMode -Sets the FTM peripheral timer sync mode.
   - flexTimer2_FTM_HAL_SetSoftwareTriggerCmd -Enables or disables the FTM peripheral timer software trigger.
   - flexTimer2_FTM_HAL_SetHardwareSyncTriggerSrc -Sets the FTM peripheral timer hardware trigger.
   - flexTimer2_FTM_HAL_SetOutmaskPwmSyncModeCmd -Determines when the OUTMASK register is updated with the value of its buffer.
   - flexTimer2_FTM_HAL_SetCountReinitSyncCmd -Determines if the FTM counter is re-initialized when the selected trigger for 
                synchronization is detected.
   - flexTimer2_FTM_HAL_SetMaxLoadingCmd -Enables or disables the FTM peripheral timer maximum loading points.
   - flexTimer2_FTM_HAL_SetMinLoadingCmd -Enables or disables the FTM peripheral timer minimum loading points.
   - flexTimer2_FTM_HAL_GetChnPairIndex -Combines the channel control.
   - flexTimer2_FTM_HAL_SetDualChnFaultCmd -Enables the FTM peripheral timer channel pair fault control.
   - flexTimer2_FTM_HAL_SetDualChnPwmSyncCmd -Enables or disables the FTM peripheral timer channel pair counter PWM sync.
   - flexTimer2_FTM_HAL_SetDualChnDeadtimeCmd -Enables or disabled the FTM peripheral timer channel pair deadtime insertion.
   - flexTimer2_FTM_HAL_SetDualChnDecapCmd -Enables or disables the FTM peripheral timer channel dual edge capture decap.
   - flexTimer2_FTM_HAL_SetDualEdgeCaptureCmd -Enables the FTM peripheral timer dual edge capture mode.
   - flexTimer2_FTM_HAL_SetDualChnCompCmd -Enables or disables the FTM peripheral timer channel pair output complement mode.
   - flexTimer2_FTM_HAL_SetDualChnCombineCmd -Enables or disables the FTM peripheral timer channel pair output combine mode.
   - flexTimer2_FTM_HAL_SetDeadtimePrescale -Sets the FTM deadtime divider.
   - flexTimer2_FTM_HAL_SetDeadtimeCount -Sets the FTM deadtime value.
   - flexTimer2_FTM_HAL_SetInitTriggerCmd -Enables or disables the generation of the trigger when the FTM counter is equal to 
                the CNTIN register.
   - flexTimer2_FTM_HAL_SetChnTriggerCmd -Enables or disables the generation of the FTM peripheral timer channel trigger.
   - flexTimer2_FTM_HAL_IsChnTriggerGenerated -Checks whether any channel trigger event has occurred.
   - flexTimer2_FTM_HAL_GetDetectedFaultInput -Gets the FTM detected fault input.
   - flexTimer2_FTM_HAL_IsWriteProtectionEnabled -Checks whether the write protection is enabled.
   - flexTimer2_FTM_HAL_SetQuadDecoderCmd -Enables the channel quadrature decoder.
   - flexTimer2_FTM_HAL_SetQuadPhaseAFilterCmd -Enables or disables the phase A input filter.
   - flexTimer2_FTM_HAL_SetQuadPhaseBFilterCmd -Enables or disables the phase B input filter.
   - flexTimer2_FTM_HAL_SetQuadPhaseAPolarity -Selects polarity for the quadrature decode phase A input.
   - flexTimer2_FTM_HAL_SetQuadPhaseBPolarity -Selects polarity for the quadrature decode phase B input.
   - flexTimer2_FTM_HAL_SetQuadMode -Sets the encoding mode used in quadrature decoding mode.
   - flexTimer2_FTM_HAL_GetQuadDir -Gets the FTM counter direction in quadrature mode.
   - flexTimer2_FTM_HAL_GetQuadTimerOverflowDir -Gets the Timer overflow direction in quadrature mode.
   - flexTimer2_FTM_HAL_SetChnInputCaptureFilter -Sets the FTM peripheral timer channel input capture filter value.
   - flexTimer2_FTM_HAL_SetFaultInputFilterVal -Sets the fault input filter value.
   - flexTimer2_FTM_HAL_SetFaultInputFilterCmd -Enables or disables the fault input filter.
   - flexTimer2_FTM_HAL_SetFaultInputCmd -Enables or disables the fault input.
   - flexTimer2_FTM_HAL_SetDualChnInvertCmd -Enables or disables the channel invert for a channel pair.
   - flexTimer2_FTM_HAL_SetInvctrlReg -Writes the provided value to the Inverting control register.
   - flexTimer2_FTM_HAL_SetChnSoftwareCtrlCmd -Enables or disables the channel software output control.
   - flexTimer2_FTM_HAL_SetChnSoftwareCtrlVal -Sets the channel software output control value.
   - flexTimer2_FTM_HAL_SetPwmLoadCmd -Enables or disables the loading of MOD, CNTIN and CV with values of their write buffer.
   - flexTimer2_FTM_HAL_SetPwmLoadChnSelCmd -Includes or excludes the channel in the matching process.
   - flexTimer2_FTM_HAL_SetGlobalTimeBaseOutputCmd -Enables or disables the FTM global time base signal generation to other 
                FTM's.
   - flexTimer2_FTM_HAL_SetGlobalTimeBaseCmd -Enables or disables the FTM timer global time base.
   - flexTimer2_FTM_HAL_SetBdmMode -Sets the BDM mode.
   - flexTimer2_FTM_HAL_SetTofFreq -Sets the FTM timer TOF Frequency.
   - flexTimer2_FTM_HAL_SetSyncMode -Sets the FTM register synchronization method.
   - flexTimer2_FTM_HAL_SetSwoctrlHardwareSyncModeCmd -Sets the sync mode for the FTM SWOCTRL register when using a hardware 
                trigger.
   - flexTimer2_FTM_HAL_SetInvctrlHardwareSyncModeCmd -Sets sync mode for FTM INVCTRL register when using a hardware trigger.
   - flexTimer2_FTM_HAL_SetOutmaskHardwareSyncModeCmd -Sets sync mode for FTM OUTMASK register when using a hardware trigger.
   - flexTimer2_FTM_HAL_SetModCntinCvHardwareSyncModeCmd -Sets sync mode for FTM MOD, CNTIN and CV registers when using a 
                hardware trigger.
   - flexTimer2_FTM_HAL_SetCounterHardwareSyncModeCmd -Sets sync mode for FTM counter register when using a hardware trigger.
   - flexTimer2_FTM_HAL_SetSwoctrlSoftwareSyncModeCmd -Sets sync mode for FTM SWOCTRL register when using a software trigger.
   - flexTimer2_FTM_HAL_SetInvctrlSoftwareSyncModeCmd -Sets sync mode for FTM INVCTRL register when using a software trigger.
   - flexTimer2_FTM_HAL_SetOutmaskSoftwareSyncModeCmd -Sets sync mode for FTM OUTMASK register when using a software trigger.
   - flexTimer2_FTM_HAL_SetModCntinCvSoftwareSyncModeCmd -Sets synch mode for FTM MOD, CNTIN and CV registers when using a 
                software trigger.
   - flexTimer2_FTM_HAL_SetCounterSoftwareSyncModeCmd -Sets sync mode for FTM counter register when using a software trigger.
   - flexTimer2_FTM_HAL_SetPwmSyncModeCmd -Sets the PWM synchronization mode to enhanced or legacy.
   - flexTimer2_FTM_HAL_SetSwoctrlPwmSyncModeCmd -Sets the SWOCTRL register PWM synchronization mode.
   - flexTimer2_FTM_HAL_SetInvctrlPwmSyncModeCmd -Sets the INVCTRL register PWM synchronization mode.
   - flexTimer2_FTM_HAL_SetCntinPwmSyncModeCmd -Sets the CNTIN register PWM synchronization mode.
   - flexTimer2_FTM_HAL_Reset -Resets the FTM registers.
   - flexTimer2_FTM_HAL_Init -Initializes the FTM.
   - flexTimer2_FTM_HAL_EnablePwmMode -Enables the FTM timer when it is PWM output mode.
   - flexTimer2_FTM_HAL_DisablePwmMode -Disables the PWM output mode.

Module "dspiCom1"  (component fsl_dspi)
   - dspiCom1_DSPI_DRV_IRQHandler -The function DSPI_DRV_IRQHandler passes IRQ control to either the master or slave driver.
   - dspiCom1_DSPI_DRV_MasterInit -Initializes a DSPI instance for master mode operation.
   - dspiCom1_DSPI_DRV_MasterDeinit -Shuts down a DSPI instance.
   - dspiCom1_DSPI_DRV_MasterSetDelay -Configures the DSPI master mode bus timing delay options.
   - dspiCom1_DSPI_DRV_MasterConfigureBus -Configures the DSPI port physical parameters to access a device on the bus.
   - dspiCom1_DSPI_DRV_MasterTransferBlocking -Performs a blocking SPI master mode transfer.
   - dspiCom1_DSPI_DRV_MasterTransfer -Performs a non-blocking SPI master mode transfer.
   - dspiCom1_DSPI_DRV_MasterGetTransferStatus -Returns whether the previous transfer is completed.
   - dspiCom1_DSPI_DRV_MasterAbortTransfer -Terminates an asynchronous transfer early.
   - dspiCom1_DSPI_DRV_MasterIRQHandler -Interrupt handler for DSPI master mode. This handler uses the buffers stored in the 
                dspi_master_state_t structs to transfer data.
   - dspiCom1_DSPI_DRV_SlaveInit -Initializes a DSPI instance for a slave mode operation, using interrupt mechanism.
   - dspiCom1_DSPI_DRV_SlaveDeinit -Shuts down a DSPI instance - interrupt mechanism.
   - dspiCom1_DSPI_DRV_SlaveTransferBlocking -Transfers data on SPI bus using interrupt and blocking call.
   - dspiCom1_DSPI_DRV_SlaveTransfer -Starts transfer data on SPI bus using interrupt and a non-blocking call.
   - dspiCom1_DSPI_DRV_SlaveAbortTransfer -Aborts the transfer that started by a non-blocking call to a transfer function.
   - dspiCom1_DSPI_DRV_SlaveGetTransferStatus -Returns whether the previous transfer is finished.
   - dspiCom1_DSPI_DRV_SlaveIRQHandler -DSPI Slave Generic IRQ handler.

Module "dspiCom2"  (component fsl_dspi)
   - dspiCom2_DSPI_DRV_IRQHandler -The function DSPI_DRV_IRQHandler passes IRQ control to either the master or slave driver.
   - dspiCom2_DSPI_DRV_MasterInit -Initializes a DSPI instance for master mode operation.
   - dspiCom2_DSPI_DRV_MasterDeinit -Shuts down a DSPI instance.
   - dspiCom2_DSPI_DRV_MasterSetDelay -Configures the DSPI master mode bus timing delay options.
   - dspiCom2_DSPI_DRV_MasterConfigureBus -Configures the DSPI port physical parameters to access a device on the bus.
   - dspiCom2_DSPI_DRV_MasterTransferBlocking -Performs a blocking SPI master mode transfer.
   - dspiCom2_DSPI_DRV_MasterTransfer -Performs a non-blocking SPI master mode transfer.
   - dspiCom2_DSPI_DRV_MasterGetTransferStatus -Returns whether the previous transfer is completed.
   - dspiCom2_DSPI_DRV_MasterAbortTransfer -Terminates an asynchronous transfer early.
   - dspiCom2_DSPI_DRV_MasterIRQHandler -Interrupt handler for DSPI master mode. This handler uses the buffers stored in the 
                dspi_master_state_t structs to transfer data.
   - dspiCom2_DSPI_DRV_SlaveInit -Initializes a DSPI instance for a slave mode operation, using interrupt mechanism.
   - dspiCom2_DSPI_DRV_SlaveDeinit -Shuts down a DSPI instance - interrupt mechanism.
   - dspiCom2_DSPI_DRV_SlaveTransferBlocking -Transfers data on SPI bus using interrupt and blocking call.
   - dspiCom2_DSPI_DRV_SlaveTransfer -Starts transfer data on SPI bus using interrupt and a non-blocking call.
   - dspiCom2_DSPI_DRV_SlaveAbortTransfer -Aborts the transfer that started by a non-blocking call to a transfer function.
   - dspiCom2_DSPI_DRV_SlaveGetTransferStatus -Returns whether the previous transfer is finished.
   - dspiCom2_DSPI_DRV_SlaveIRQHandler -DSPI Slave Generic IRQ handler.

Module "dspiCom3"  (component fsl_dspi_hal)
   - dspiCom3_DSPI_HAL_Init -Restores the DSPI to reset the configuration.
   - dspiCom3_DSPI_HAL_Enable -Enables the DSPI peripheral and sets the MCR MDIS to 0.
   - dspiCom3_DSPI_HAL_Disable -Disables the DSPI peripheral, sets MCR MDIS to 1.
   - dspiCom3_DSPI_HAL_SetBaudRate -Sets the DSPI baud rate in bits per second.
   - dspiCom3_DSPI_HAL_SetBaudDivisors -Configures the baud rate divisors manually.
   - dspiCom3_DSPI_HAL_SetMasterSlaveMode -Configures the DSPI for master or slave.
   - dspiCom3_DSPI_HAL_IsMaster -Returns whether the DSPI module is in master mode.
   - dspiCom3_DSPI_HAL_SetContinuousSckCmd -Configures the DSPI for the continuous SCK operation.
   - dspiCom3_DSPI_HAL_SetPcsStrobeCmd -Configures the DSPI peripheral chip select strobe enable. Configures the PCS[5] to be 
                the active-low PCS Strobe output.
   - dspiCom3_DSPI_HAL_SetRxFifoOverwriteCmd -Configures the DSPI received FIFO overflow overwrite enable.
   - dspiCom3_DSPI_HAL_SetPcsPolarityMode -Configures the DSPI peripheral chip select polarity.
   - dspiCom3_DSPI_HAL_SetFifoCmd -Enables (or disables) the DSPI FIFOs.
   - dspiCom3_DSPI_HAL_SetFlushFifoCmd -Flushes the DSPI FIFOs.
   - dspiCom3_DSPI_HAL_SetDatainSamplepointMode -Configures the time when the DSPI master samples SIN in the Modified Transfer 
                Format.
   - dspiCom3_DSPI_HAL_StartTransfer -Starts the DSPI transfers, clears HALT bit in MCR.
   - dspiCom3_DSPI_HAL_StopTransfer -Stops (halts) DSPI transfers, sets HALT bit in MCR.
   - dspiCom3_DSPI_HAL_SetDataFormat -Configures the data format for a particular CTAR.
   - dspiCom3_DSPI_HAL_SetDelay -Manually configures the delay prescaler and scaler for a particular CTAR.
   - dspiCom3_DSPI_HAL_CalculateDelay -Calculates the delay prescaler and scaler based on the desired delay input in 
                nanoseconds.
   - dspiCom3_DSPI_HAL_GetMasterPushrRegAddr -Gets the DSPI master PUSHR data register address for DMA operation.
   - dspiCom3_DSPI_HAL_GetSlavePushrRegAddr -Gets the DSPI slave PUSHR data register address for DMA operation.
   - dspiCom3_DSPI_HAL_GetPoprRegAddr -Gets the DSPI POPR data register address for DMA operation.
   - dspiCom3_DSPI_HAL_SetTxFifoFillDmaIntMode -Configures the DSPI Tx FIFO fill request to generate DMA or interrupt requests.
   - dspiCom3_DSPI_HAL_SetRxFifoDrainDmaIntMode -Configures the DSPI Rx FIFO Drain request to generate DMA or interrupt 
                requests.
   - dspiCom3_DSPI_HAL_SetIntMode -Configures the DSPI interrupts.
   - dspiCom3_DSPI_HAL_GetIntMode -Gets DSPI interrupt configuration, returns if interrupt request is enabled or disabled.
   - dspiCom3_DSPI_HAL_GetStatusFlag -Gets the DSPI status flag state.
   - dspiCom3_DSPI_HAL_ClearStatusFlag -Clears the DSPI status flag.
   - dspiCom3_DSPI_HAL_ReadData -Reads data from the data buffer.
   - dspiCom3_DSPI_HAL_WriteDataSlavemode -Writes data into the data buffer, slave mode.
   - dspiCom3_DSPI_HAL_WriteDataSlavemodeBlocking -Writes data into the data buffer, slave mode and waits till data was 
                transmitted and return.
   - dspiCom3_DSPI_HAL_WriteDataMastermode -Writes data into the data buffer, master mode.
   - dspiCom3_DSPI_HAL_WriteDataMastermodeBlocking -Writes data into the data buffer, master mode and waits till complete to 
                return.
   - dspiCom3_DSPI_HAL_WriteCmdDataMastermode -Writes a 32-bit data word (16-bit command appended with 16-bit data) into the 
                data buffer, master mode.
   - dspiCom3_DSPI_HAL_WriteCmdDataMastermodeBlocking -Writes a 32-bit data word (16-bit command appended with 16-bit data) 
                into the data buffer, master mode and waits till complete to return.
   - dspiCom3_DSPI_HAL_GetTransferCount -Gets the transfer count.
   - dspiCom3_DSPI_HAL_PresetTransferCount -Pre-sets the transfer count.
   - dspiCom3_DSPI_HAL_GetFormattedCommand -Returns the DSPI command word formatted to the PUSHR data register bit field.

Module "usbDsc1"   (component fsl_usb_descriptors)

Module "usbFmw1"   (component fsl_usb_framework)
   - usbFmw1_usb_device_init -Initializes the device controller specified by the controller_id and a device handle can be 
                returned from the handle.
   - usbFmw1_usb_device_postinit -Starts the initialization process that cannot be done in the usb_device_init() API. For 
                example, the call back functions need to be registered after the device handle can be obtained from the 
                usb_device_init() API. Therefore, the USB interrupt cannot be enabled in usb_device_init(); otherwise, the USB 
                interrupt can be issued before the callback functions are registered. To avoid this issue, the USB interrupt 
                will be enabled in the post initialization process.
   - usbFmw1_usb_device_deinit -The function un-initializes the device controller specified by the handle.
   - usbFmw1_usb_device_recv_data -The function is used to receive data from a specified endpoint.
   - usbFmw1_usb_device_send_data -The function is used to send data to a specified endpoint.
   - usbFmw1_usb_device_cancel_transfer -The function is used to cancel all the pending transfer in a specified endpoint which 
                is determined by the endpoint index and the direction.
   - usbFmw1_usb_device_register_service -The function is used to register a callback function for one specified endpoint.
   - usbFmw1_usb_device_unregister_service -The function is used to unregister a callback function for one specified endpoint.
   - usbFmw1_usb_device_init_endpoint -The function is used to initialize a specific endpoint which is determined by the ep_ptr.
   - usbFmw1_usb_device_deinit_endpoint -The function is used to un-initialize a specific endpoint which is determined by the 
                endpoint index and endpoint direction.
   - usbFmw1_usb_device_stall_endpoint -The function is used to stall a specific endpoint which is determined by the endpoint 
                index and endpoint direction.
   - usbFmw1_usb_device_unstall_endpoint -The function is used to un-stall a specific endpoint which is determined by the 
                endpoint index and endpoint direction.
   - usbFmw1_usb_device_register_application_notify -The function is used to register a callback function for the application 
                related event. Currently the following events are supported:       USB_DEV_EVENT_BUS_RESET - A BUS reset is 
                received.       USB_DEV_EVENT_ENUM_COMPLETE - The device enumerated process completes.       
                USB_DEV_EVENT_CONFIG_CHANGED - Host sends a set_configuration.       USB_DEV_EVENT_ERROR - Error.
   - usbFmw1_usb_device_register_vendor_class_request_notify -The function is used to register a callback function for the 
                vendor class request related event. Currently the vendor class is not implemented, so both the 
                request_notify_callback and request_notify_param can be set to NULL.
   - usbFmw1_usb_device_register_desc_request_notify -The function is used to register a set of callback functions for the 
                device descriptor related event.
   - usbFmw1_usb_device_get_status -The function is used to get the status of the specified component.
   - usbFmw1_usb_device_set_status -The function is used to set the status of the specified component.

Module "dmaController1" (component fsl_edma)
   - dmaController1_EDMA_DRV_Init -Initializes all eDMA modules in an SOC.
   - dmaController1_EDMA_DRV_Deinit -Shuts down all eDMA modules.
   - dmaController1_EDMA_DRV_RequestChannel -Requests an eDMA channel dynamically or statically.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA channel.
   - dmaController1_EDMA_DRV_PrepareDescriptorTransfer -Sets the descriptor basic transfer for the descriptor.
   - dmaController1_EDMA_DRV_PrepareDescriptorScatterGather -Configures the memory address for the next transfer TCD for the 
                software TCD.
   - dmaController1_EDMA_DRV_PrepareDescriptorChannelLink -Configures the major channel link the software TCD.
   - dmaController1_EDMA_DRV_PushDescriptorToReg -Copies the software TCD configuration to the hardware TCD.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA channel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA channel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA channel.
   - dmaController1_EDMA_DRV_IRQHandler -IRQ Handler for eDMA channel interrupt.
   - dmaController1_EDMA_DRV_ErrorIRQHandler -ERROR IRQ Handler for eDMA channel interrupt.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA channel status.
   - dmaController1_EDMA_DRV_GetUnfinishedBytes -Gets the unfinished bytes for the eDMA channel current TCD.
   - dmaController1_EDMA_DRV_GetFinishedBytes -Gets the bytes already transferred for the eDMA channel current TCD.

Module "msd1"      (component fsl_usb_device_msd_class)
   - msd1_USB_Class_MSC_Init -Initializes the MSC class, the underlying layers, and the controller hardware. This method is 
                available only for non-composite device (only one device class class component in the project). For 
                initializing a composite device (more devices class class component in the project) must be 
                USB_Composite_Init() method called.
   - msd1_USB_Class_MSC_Deinit -Un-initialize the MSD class, the underlying layers, and the controller hardware. This method is 
                available only for non-composite device (only one device class class component in the project). For a composite 
                device must be USB_Composite_Deinit() method called for un-initializing USB device stack.

Module "DbgCs1"    (component fsl_debug_console)
   - DbgCs1_DbgConsole_Init -Init the UART/LPUART used for debug messages.
   - DbgCs1_DbgConsole_DeInit -Deinit the UART/LPUART used for debug messages.
   - DbgCs1_debug_printf -Prints formatted output to the standard output stream.
   - DbgCs1_debug_putchar -Writes a character to stdout.
   - DbgCs1_debug_scanf -Reads formatted data from the standard input stream.
   - DbgCs1_debug_getchar -Reads a character from standard input.

Module "Cpu"       (component MK65FN2M0MI18)
   - Cpu_SystemInit -This method configures the oscillator (PLL) that is part of the microcontroller device. SystemInit is 
                called from startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock.

===================================================================================
